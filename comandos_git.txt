COMANDOS GIT:

$ git init

Para iniciar un nuevo proyecto en el directorio actual.
Esto crea el directorio oculto .git/ que contiene todos los archivos 
necesarios para el repositorio. Un esqueleto del repositorio git.
Todavía no hay nada en tu proyecto que esté bajo seguimiento.


$ git status

Es un comando principal que sirve para determinar que archivos están y en 
que estado. Si no están seguidos (rastreados), o si ya están seguidos y por 
lo tanto, en el "staged area".


$ git status -s

Lo mismo que lo anterior pero en formato abreviado.


$ git add <archivo>

Este comando sirve para empezar a rastrear el archivo. Es decir, envía o añade 
el archivo al "staged area". Puede rastrear archivos o directorios, los cuales 
rastreará recursivamente todos los archivos incluidos en él. 
Para cada modificación en un archivo debes ejecutar este comando.
Al ejecutar este comando sobre un archivo, dicho archivo aparecerá como archivo 
preparado. Este comando prepara los archivos para la próxima confirmación.


$ git reset HEAD <archivo>

Este comando deshace un archivo preparado o rastreado, es decir lo saca del 
"staged area".


$ git rm <archivo>

Prepara la eliminación de un archivo para el próximo commit. 
Una vez hayas eliminado el archivo de tu directorio con "rm".


$ git rm --cached <archivo>

Eliminar el archivo del area staged, pero sin eliminarlo de tu directorio de 
trabajo. Es posible que hayas olvidado de añadirlo en el archivo .gitignore.


$ git rm log/\*.log

Este comando elimina del stage area todos los archivos terminados en la 
extensión .log del directorio "log/". atención al caracter \ necesario en git.


$ git rm \*~

Elimina del stage area todos los archivos terminados en ~. 
Tener siempre cuidado de añadir el símbolo \


$ git mv <archivo_inicial> <archivo_final>

Cambia el nombre de un archivo en el stage area.


$ git commit

Este comando sirve para confirmar los cambios que ya tienes rastreados en la 
stage area. Aparecerá tu editor de textos preestablecido para que insertes un 
mensaje o texto para el commit, por ejemplo: "Mi primer commit o actualización"


$ git commit -m "texto o mensaje del commit"

Exactamente igual que el anterior pero esta vez ya escribes el mensaje en 
lugar de utilizar el editor de texto predefinido.


$ git commit -a -m "texto informativo"

Exactamente igual que el anterior pero esta vez nos saltamos el paso de 
preparar o rastrear los archivos en el stage area y añadir directamente los 
archivos del espacio de trabajo a ser comentados o confirmados (commiteados).
Nos estamos saltando el comando "git add".


$ git diff

Este comando compara lo que tienes en tu directorio de trabajo con lo que está 
en el stage area o área de preparación.


$ git diff --staged

Este comando compara tus cambios en el stage area con la última instantánea 
confirmada o commiteada.


$ git diff --cached

Es sinónimo de "--staged".


$ git config --list

Este comando lista todas las propiedades de tu configuración de git


$ git config --global user.name "Belinux"

Este comando añade tu nombre de usuario, ya que debes identificarte cuando 
instales git.


$ git config --global user.email "nombre@ejemplo.com"

Este comando añade tu correo electrónico. Es importante para empezar a hacer 
commits, ya que git usa tu nombre y correo electrónico para identificar los 
cambios confirmados o commiteados.


$ git config --global core.editor nano

Este comando preestablece tu editor de texto favorito. Es necesario cuando 
realizamos un: "git commit" a secas, ya que nos abrirá el editor de texto 
que hemos predefinido para editar un mensaje.


$ git log

Muestra todos los commits o confirmaciones cronológicamente inversa.


$ git log -p

Muestra todos los commits o confirmaciones cronológicamente inversa.
Y muestra las diferencias introducidas en los archivos.


$ git log -p -2

Muestra todos los commits o confirmaciones cronológicamente inversa.
Muestra las últimas 2 entradas con sus diferencias.


$ git log --stat

Muestra todos los commits o confirmaciones cronológicamente inversa.
Con los archivos y sus diferencias. Con una serie de estadísticas.


$ git branch

Este comando muestra cuantas ramas tienes activas.


$ git branch <nombre_rama>

Este comando crea una nueva rama y le da un nombre.


$ git checkout <nombre_rama>

Este comando cambia a la nueva rama.


$ git clone <URL>

Este comando clona un repositorio externo en tu PC, creando un subdirectorio 
del mismo nombre que el repositorio con todos los archivos incluidos 
recursivamente. Además inicia el repositorio en local, no es necesario 
iniciarlo con "git init".


$ git push

Sube al repositorio remoto tu commit, te pide nombre de usuario y contraseña 
del repositorio remoto.


$ git pull

